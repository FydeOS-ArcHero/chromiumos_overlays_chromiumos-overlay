From 2947bd664c44c7602e079dca71a1824ac7296cbe Mon Sep 17 00:00:00 2001
From: Chen_JasonK <jason.k.chen@intel.com>
Date: Mon, 18 Feb 2019 12:54:54 +0800
Subject: [PATCH] [VP] Add VP pipeline in PutImage

Add VP pipeline in PutImage

Change-Id: I8c9f0441c85b05c50efad4ea8d57d45df5b4b357
---
 media_driver/linux/common/ddi/media_libva.cpp | 234 ++++++++++++------
 .../linux/common/vp/ddi/media_libva_vp.c      |  39 ++-
 .../linux/common/vp/ddi/media_libva_vp.h      |  10 +-
 3 files changed, 182 insertions(+), 101 deletions(-)

diff --git a/media_driver/linux/common/ddi/media_libva.cpp b/media_driver/linux/common/ddi/media_libva.cpp
index 7762d65080d6..d87c7adfed7d 100755
--- a/media_driver/linux/common/ddi/media_libva.cpp
+++ b/media_driver/linux/common/ddi/media_libva.cpp
@@ -4465,24 +4465,24 @@ VAStatus DdiMedia_GetImage(
     DDI_CHK_NULL(ctx,       "nullptr ctx.",         VA_STATUS_ERROR_INVALID_CONTEXT);
 
     PDDI_MEDIA_CONTEXT mediaCtx = DdiMedia_GetMediaContext(ctx);
-    DDI_CHK_NULL(mediaCtx,  "nullptr mediaCtx.",    VA_STATUS_ERROR_INVALID_PARAMETER);
+    DDI_CHK_NULL(mediaCtx,  "nullptr mediaCtx.",    VA_STATUS_ERROR_INVALID_CONTEXT);
 
-    DDI_CHK_NULL(mediaCtx->pSurfaceHeap,    "nullptr mediaCtx->pSurfaceHeap",   VA_STATUS_ERROR_INVALID_CONTEXT);
-    DDI_CHK_NULL(mediaCtx->pImageHeap,      "nullptr mediaCtx->pImageHeap",     VA_STATUS_ERROR_INVALID_CONTEXT);
-    DDI_CHK_LESS((uint32_t)surface, mediaCtx->pSurfaceHeap->uiAllocatedHeapElements, "Invalid surface", VA_STATUS_ERROR_INVALID_SURFACE);
-    DDI_CHK_LESS((uint32_t)image,   mediaCtx->pImageHeap->uiAllocatedHeapElements,   "Invalid image",   VA_STATUS_ERROR_INVALID_IMAGE);
+    DDI_CHK_NULL(mediaCtx->pSurfaceHeap,    "nullptr mediaCtx->pSurfaceHeap.",   VA_STATUS_ERROR_INVALID_CONTEXT);
+    DDI_CHK_NULL(mediaCtx->pImageHeap,      "nullptr mediaCtx->pImageHeap.",     VA_STATUS_ERROR_INVALID_CONTEXT);
+    DDI_CHK_LESS((uint32_t)surface, mediaCtx->pSurfaceHeap->uiAllocatedHeapElements, "Invalid surface.", VA_STATUS_ERROR_INVALID_SURFACE);
+    DDI_CHK_LESS((uint32_t)image,   mediaCtx->pImageHeap->uiAllocatedHeapElements,   "Invalid image.",   VA_STATUS_ERROR_INVALID_IMAGE);
 
     VAImage *vaimg = DdiMedia_GetVAImageFromVAImageID(mediaCtx, image);
-    DDI_CHK_NULL(vaimg,     "nullptr vaimg.",       VA_STATUS_ERROR_INVALID_PARAMETER);
+    DDI_CHK_NULL(vaimg,     "nullptr vaimg.",       VA_STATUS_ERROR_INVALID_IMAGE);
 
     DDI_MEDIA_BUFFER *buf = DdiMedia_GetBufferFromVABufferID(mediaCtx, vaimg->buf);
-    DDI_CHK_NULL(buf,       "nullptr buf.",         VA_STATUS_ERROR_INVALID_PARAMETER);
+    DDI_CHK_NULL(buf,       "nullptr buf.",         VA_STATUS_ERROR_INVALID_BUFFER);
 
     DDI_MEDIA_SURFACE *inputSurface = DdiMedia_GetSurfaceFromVASurfaceID(mediaCtx, surface);
-    DDI_CHK_NULL(inputSurface,     "nullptr inputSurface.",      VA_STATUS_ERROR_INVALID_PARAMETER);
-    DDI_CHK_NULL(inputSurface->bo, "nullptr inputSurface->bo.",  VA_STATUS_ERROR_INVALID_PARAMETER);
+    DDI_CHK_NULL(inputSurface,     "nullptr inputSurface.",      VA_STATUS_ERROR_INVALID_SURFACE);
+    DDI_CHK_NULL(inputSurface->bo, "nullptr inputSurface->bo.",  VA_STATUS_ERROR_INVALID_SURFACE);
 
-    VAStatus        vaStatus = VA_STATUS_SUCCESS;
+    VAStatus        vaStatus       = VA_STATUS_SUCCESS;
     VASurfaceID     target_surface = VA_INVALID_SURFACE;
     VASurfaceID     output_surface = surface;
 
@@ -4491,8 +4491,8 @@ VAStatus DdiMedia_GetImage(
         width != vaimg->width || height != vaimg->height)
     {
         VAContextID context = VA_INVALID_ID;
-        
-        if (mediaCtx->pVpCtxHeap->pHeapBase != nullptr)
+
+        if (mediaCtx->pVpCtxHeap != nullptr && mediaCtx->pVpCtxHeap->pHeapBase != nullptr)
         {
             //Get VP Context from heap.
             context = (VAContextID)(0 + DDI_MEDIA_VACONTEXTID_OFFSET_VP);
@@ -4500,15 +4500,31 @@ VAStatus DdiMedia_GetImage(
         {
             //Create VP Context.
             vaStatus = DdiVp_CreateContext(ctx, 0, 0, 0, 0, 0, 0, &context);
-            DDI_CHK_RET(vaStatus, "Create VP Context failed");
+            DDI_CHK_RET(vaStatus, "Create VP Context failed.");
         }
 
         //Create target surface for VP pipeline.
-        vaStatus = DdiMedia_CreateSurfaces2(ctx, vaimg->format.fourcc, vaimg->width, vaimg->height, &target_surface, 1, NULL, 0);
+        DDI_MEDIA_FORMAT mediaFmt = DdiMedia_OsFormatToMediaFormat(vaimg->format.fourcc, vaimg->format.fourcc);
+        if (mediaFmt == Media_Format_Count)
+        {
+            DDI_ASSERTMESSAGE("Unsupported surface type.");
+            return VA_STATUS_ERROR_UNSUPPORTED_RT_FORMAT;
+        }
+        target_surface = (VASurfaceID)DdiMedia_CreateRenderTarget(mediaCtx, mediaFmt, vaimg->width, vaimg->height, nullptr, VA_SURFACE_ATTRIB_USAGE_HINT_VPP_WRITE);
         DDI_CHK_RET(vaStatus, "Create temp surface failed.");
 
+        VARectangle srcRect, dstRect;
+        srcRect.x      = x;
+        srcRect.y      = y;
+        srcRect.width  = width;
+        srcRect.height = height;
+        dstRect.x      = 0;
+        dstRect.y      = 0;
+        dstRect.width  = vaimg->width;
+        dstRect.height = vaimg->height;
+
         //Execute VP pipeline.
-        vaStatus = DdiVp_VideoProcessPipeline(ctx, context, surface, x, y, width, height, target_surface);
+        vaStatus = DdiVp_VideoProcessPipeline(ctx, context, surface, &srcRect, target_surface, &dstRect);
         if (vaStatus != VA_STATUS_SUCCESS)
         {
             DDI_ASSERTMESSAGE("VP Pipeline failed.");
@@ -4521,8 +4537,8 @@ VAStatus DdiMedia_GetImage(
 
     //Get Media Surface from output surface ID
     DDI_MEDIA_SURFACE *mediaSurface = DdiMedia_GetSurfaceFromVASurfaceID(mediaCtx, output_surface);
-    DDI_CHK_NULL(mediaSurface,     "nullptr mediaSurface.",      VA_STATUS_ERROR_INVALID_PARAMETER);
-    DDI_CHK_NULL(mediaSurface->bo, "nullptr mediaSurface->bo.",  VA_STATUS_ERROR_INVALID_PARAMETER);
+    DDI_CHK_NULL(mediaSurface,     "nullptr mediaSurface.",      VA_STATUS_ERROR_INVALID_SURFACE);
+    DDI_CHK_NULL(mediaSurface->bo, "nullptr mediaSurface->bo.",  VA_STATUS_ERROR_INVALID_SURFACE);
 
     //Lock Surface
     void *surfData = DdiMediaUtil_LockSurface(mediaSurface, (MOS_LOCKFLAG_READONLY | MOS_LOCKFLAG_NO_SWIZZLE));
@@ -4540,6 +4556,7 @@ VAStatus DdiMedia_GetImage(
     vaStatus = DdiMedia_MapBuffer(ctx, vaimg->buf, &imageData);
     if (vaStatus != VA_STATUS_SUCCESS)
     {
+        DDI_ASSERTMESSAGE("Failed to map buffer.");
         DdiMediaUtil_UnlockSurface(mediaSurface);
         if(target_surface != VA_INVALID_SURFACE)
         {
@@ -4560,7 +4577,7 @@ VAStatus DdiMedia_GetImage(
     }
     if (vaStatus != MOS_STATUS_SUCCESS)
     {
-        DDI_ASSERTMESSAGE("DDI:Failed to copy surface to image buffer data!");
+        DDI_ASSERTMESSAGE("Failed to copy surface to image buffer data!");
         DdiMediaUtil_UnlockSurface(mediaSurface);
         if(target_surface != VA_INVALID_SURFACE)
         {
@@ -4572,6 +4589,7 @@ VAStatus DdiMedia_GetImage(
     vaStatus = DdiMedia_UnmapBuffer(ctx, vaimg->buf);
     if (vaStatus != VA_STATUS_SUCCESS)
     {
+        DDI_ASSERTMESSAGE("Failed to unmap buffer.");
         DdiMediaUtil_UnlockSurface(mediaSurface);
         if(target_surface != VA_INVALID_SURFACE)
         {
@@ -4594,7 +4612,7 @@ VAStatus DdiMedia_GetImage(
 //!
 //! \brief  Copy data from a VAImage to a surface
 //! \details    Image must be in a format supported by the implementation
-//! 
+//!
 //! \param  [in] ctx
 //!         Input driver context
 //! \param  [in] surface
@@ -4602,21 +4620,21 @@ VAStatus DdiMedia_GetImage(
 //! \param  [in] image
 //!         The image ID of the destination image
 //! \param  [in] src_x
-//!         Source x offset of the surface region
+//!         Source x offset of the image region
 //! \param  [in] src_y
-//!         Source y offset of the surface region
+//!         Source y offset of the image region
 //! \param  [in] src_width
-//!         Source width offset of the surface region
+//!         Source width offset of the image region
 //! \param  [in] src_height
-//!         Source height offset of the surface region
+//!         Source height offset of the image region
 //! \param  [in] dest_x
-//!         Destination x offset of the image region
+//!         Destination x offset of the surface region
 //! \param  [in] dest_y
-//!         Destination y offset of the image region
+//!         Destination y offset of the surface region
 //! \param  [in] dest_width
-//!         Destination width offset of the image region
+//!         Destination width offset of the surface region
 //! \param  [in] dest_height
-//!         Destination height offset of the image region
+//!         Destination height offset of the surface region
 //!
 //! \return VAStatus
 //!     VA_STATUS_SUCCESS if success, else fail reason
@@ -4635,28 +4653,21 @@ VAStatus DdiMedia_PutImage(
     uint32_t         dest_height
 )
 {
-    DDI_UNUSED(src_x);
-    DDI_UNUSED(src_y);
-    DDI_UNUSED(src_width);
-    DDI_UNUSED(src_height);
-    DDI_UNUSED(dest_x);
-    DDI_UNUSED(dest_y);
-    DDI_UNUSED(dest_width);
-    DDI_UNUSED(dest_height);
-
     DDI_FUNCTION_ENTER();
 
-    DDI_CHK_NULL(ctx,                     "nullptr ctx.",                    VA_STATUS_ERROR_INVALID_CONTEXT);
+    DDI_CHK_NULL(ctx,                    "nullptr ctx.",                     VA_STATUS_ERROR_INVALID_CONTEXT);
 
     PDDI_MEDIA_CONTEXT mediaCtx     = DdiMedia_GetMediaContext(ctx);
-    DDI_CHK_NULL(mediaCtx,               "nullptr mediaCtx.",              VA_STATUS_ERROR_INVALID_PARAMETER);
-    DDI_CHK_NULL(mediaCtx->pSurfaceHeap, "nullptr mediaCtx->pSurfaceHeap",   VA_STATUS_ERROR_INVALID_CONTEXT);
-    DDI_CHK_LESS((uint32_t)surface, mediaCtx->pSurfaceHeap->uiAllocatedHeapElements, "Invalid surface", VA_STATUS_ERROR_INVALID_SURFACE);
-    DDI_CHK_NULL(mediaCtx->pImageHeap,   "nullptr mediaCtx->pImageHeap",     VA_STATUS_ERROR_INVALID_CONTEXT);
-    DDI_CHK_LESS((uint32_t)image, mediaCtx->pImageHeap->uiAllocatedHeapElements,     "Invalid image",   VA_STATUS_ERROR_INVALID_IMAGE);
+    DDI_CHK_NULL(mediaCtx,               "nullptr mediaCtx.",                VA_STATUS_ERROR_INVALID_CONTEXT);
+
+    DDI_CHK_NULL(mediaCtx->pSurfaceHeap, "nullptr mediaCtx->pSurfaceHeap.",   VA_STATUS_ERROR_INVALID_CONTEXT);
+    DDI_CHK_NULL(mediaCtx->pImageHeap,   "nullptr mediaCtx->pImageHeap.",     VA_STATUS_ERROR_INVALID_CONTEXT);
+    DDI_CHK_LESS((uint32_t)surface, mediaCtx->pSurfaceHeap->uiAllocatedHeapElements, "Invalid surface.", VA_STATUS_ERROR_INVALID_SURFACE);
+    DDI_CHK_LESS((uint32_t)image, mediaCtx->pImageHeap->uiAllocatedHeapElements,     "Invalid image.",   VA_STATUS_ERROR_INVALID_IMAGE);
 
     DDI_MEDIA_SURFACE *mediaSurface = DdiMedia_GetSurfaceFromVASurfaceID(mediaCtx, surface);
-    DDI_CHK_NULL(mediaSurface, "nullptr mediaSurface.", VA_STATUS_ERROR_INVALID_PARAMETER);
+    DDI_CHK_NULL(mediaSurface,     "nullptr mediaSurface.", VA_STATUS_ERROR_INVALID_SURFACE);
+    DDI_CHK_NULL(mediaSurface->bo, "Invalid buffer.",       VA_STATUS_ERROR_INVALID_BUFFER);
 
     if (mediaSurface->pCurrentFrameSemaphore)
     {
@@ -4665,49 +4676,128 @@ VAStatus DdiMedia_PutImage(
     }
 
     VAImage          *vaimg = DdiMedia_GetVAImageFromVAImageID(mediaCtx, image);
-    DDI_CHK_NULL(vaimg,      "Invalid image.",      VA_STATUS_ERROR_INVALID_PARAMETER);
+    DDI_CHK_NULL(vaimg,      "Invalid image.",      VA_STATUS_ERROR_INVALID_IMAGE);
 
     DDI_MEDIA_BUFFER *buf   = DdiMedia_GetBufferFromVABufferID(mediaCtx, vaimg->buf);
-    DDI_CHK_NULL(buf,       "Invalid buffer.",      VA_STATUS_ERROR_INVALID_PARAMETER);
+    DDI_CHK_NULL(buf,       "Invalid buffer.",      VA_STATUS_ERROR_INVALID_BUFFER);
 
-    if (mediaSurface->format != DdiMedia_OsFormatAlphaMaskToMediaFormat(vaimg->format.fourcc,vaimg->format.alpha_mask))
-    {
-        return VA_STATUS_ERROR_UNIMPLEMENTED;
-    }
+    VAStatus vaStatus = VA_STATUS_SUCCESS;
+    void *imageData   = nullptr;
 
-    DDI_CHK_NULL(mediaSurface->bo, "Invalid buffer.", VA_STATUS_ERROR_INVALID_PARAMETER);
+    vaStatus = DdiMedia_MapBuffer(ctx, vaimg->buf, &imageData);
+    DDI_CHK_RET(vaStatus, "MapBuffer failed.");
+    DDI_CHK_NULL(imageData, "nullptr imageData.", VA_STATUS_ERROR_INVALID_IMAGE);
 
-    //Lock Surface
-    void *surfData = DdiMediaUtil_LockSurface(mediaSurface, (MOS_LOCKFLAG_READONLY | MOS_LOCKFLAG_WRITEONLY));
-    if (nullptr == surfData)
+    // VP Pipeline will be called for CSC/Scaling if the surface format or data size is not consistent with image.
+    if (mediaSurface->format != DdiMedia_OsFormatAlphaMaskToMediaFormat(vaimg->format.fourcc,vaimg->format.alpha_mask) ||
+        mediaSurface->iWidth != vaimg->width || mediaSurface->iHeight != vaimg->height)
     {
-        return VA_STATUS_ERROR_SURFACE_BUSY;
-    }
+        VAContextID context     = VA_INVALID_ID;
 
-    void *imageData = nullptr;
-    VAStatus status = DdiMedia_MapBuffer(ctx, vaimg->buf, &imageData);
-    if (status != VA_STATUS_SUCCESS)
-    {
-        DdiMediaUtil_UnlockSurface(mediaSurface);
-        return VA_STATUS_ERROR_UNKNOWN;
-    }
+        if (mediaCtx->pVpCtxHeap != nullptr && mediaCtx->pVpCtxHeap->pHeapBase != nullptr)
+        {
+            //Get VP Context from heap.
+            context = (VAContextID)(0 + DDI_MEDIA_VACONTEXTID_OFFSET_VP);
+        }else
+        {
+            //Create VP Context.
+            vaStatus = DdiVp_CreateContext(ctx, 0, 0, 0, 0, 0, 0, &context);
+            DDI_CHK_RET(vaStatus, "Create VP Context failed");
+        }
 
-    //copy data from image to surferce
-    //this is temp solution, will copy by difference size and difference format in further
-    MOS_STATUS eStatus = MOS_SecureMemcpy(surfData, mediaSurface->data_size, imageData, vaimg->data_size);
-    DDI_CHK_CONDITION((eStatus != MOS_STATUS_SUCCESS), "DDI:Failed to copy image to surface buffer data!", VA_STATUS_ERROR_OPERATION_FAILED);
+        //Create temp surface for VP pipeline.
+        DDI_MEDIA_FORMAT mediaFmt = DdiMedia_OsFormatToMediaFormat(vaimg->format.fourcc, vaimg->format.fourcc);
+        if (mediaFmt == Media_Format_Count)
+        {
+            DDI_ASSERTMESSAGE("Unsupported surface type.");
+            return VA_STATUS_ERROR_UNSUPPORTED_RT_FORMAT;
+        }
+
+        VASurfaceID tempSurface = (VASurfaceID)DdiMedia_CreateRenderTarget(mediaCtx, mediaFmt, vaimg->width, vaimg->height, nullptr, VA_SURFACE_ATTRIB_USAGE_HINT_VPP_READ);
+        if (tempSurface == VA_INVALID_ID)
+        {
+            return VA_STATUS_ERROR_ALLOCATION_FAILED;
+        }
+
+        DDI_MEDIA_SURFACE *tempMediaSurface = DdiMedia_GetSurfaceFromVASurfaceID(mediaCtx, tempSurface);
+        DDI_CHK_NULL(tempMediaSurface, "nullptr tempMediaSurface.", VA_STATUS_ERROR_INVALID_SURFACE);
+
+        //Lock Surface
+        void *tempSurfData = DdiMediaUtil_LockSurface(tempMediaSurface, (MOS_LOCKFLAG_READONLY | MOS_LOCKFLAG_WRITEONLY));
+        if (nullptr == tempSurfData)
+        {
+            DdiMedia_DestroySurfaces(ctx, &tempSurface, 1);
+            return VA_STATUS_ERROR_SURFACE_BUSY;
+        }
+
+        //Copy data from image to temp surferce
+        MOS_STATUS eStatus = MOS_SecureMemcpy(tempSurfData, vaimg->data_size, imageData, vaimg->data_size);
+        if (eStatus != MOS_STATUS_SUCCESS)
+        {
+            DDI_ASSERTMESSAGE("Failed to copy image to surface buffer.");
+            DdiMediaUtil_UnlockSurface(tempMediaSurface);
+            DdiMedia_DestroySurfaces(ctx, &tempSurface, 1);
+            return VA_STATUS_ERROR_OPERATION_FAILED;
+        }
+
+        vaStatus = DdiMedia_UnmapBuffer(ctx, vaimg->buf);
+        if (vaStatus != VA_STATUS_SUCCESS)
+        {
+            DDI_ASSERTMESSAGE("Failed to unmap buffer.");
+            DdiMediaUtil_UnlockSurface(tempMediaSurface);
+            DdiMedia_DestroySurfaces(ctx, &tempSurface, 1);
+            return vaStatus;
+        }
+
+        DdiMediaUtil_UnlockSurface(tempMediaSurface);
+
+        VARectangle srcRect, dstRect;
+        srcRect.x      = src_x;
+        srcRect.y      = src_y;
+        srcRect.width  = src_width;
+        srcRect.height = src_height;
+        dstRect.x      = dest_x;
+        dstRect.y      = dest_y;
+        dstRect.width  = dest_width;
+        dstRect.height = dest_height;
 
-    status = DdiMedia_UnmapBuffer(ctx, vaimg->buf);
-    if (status != VA_STATUS_SUCCESS)
+        //Execute VP pipeline.
+        vaStatus = DdiVp_VideoProcessPipeline(ctx, context, tempSurface, &srcRect, surface, &dstRect);
+        if (vaStatus != VA_STATUS_SUCCESS)
+        {
+            DDI_ASSERTMESSAGE("VP Pipeline failed.");
+            DdiMedia_DestroySurfaces(ctx, &tempSurface, 1);
+            return vaStatus;
+        }
+
+        DdiMedia_DestroySurfaces(ctx, &tempSurface, 1);
+    }
+    else
     {
+        //Lock Surface
+        void *surfData = DdiMediaUtil_LockSurface(mediaSurface, (MOS_LOCKFLAG_READONLY | MOS_LOCKFLAG_WRITEONLY));
+        if (nullptr == surfData)
+        {
+            DDI_ASSERTMESSAGE("Failed to lock surface.");
+            return VA_STATUS_ERROR_SURFACE_BUSY;
+        }
+
+        //Copy data from image to surface
+        MOS_STATUS eStatus = MOS_SecureMemcpy(surfData, vaimg->data_size, imageData, vaimg->data_size);
+        DDI_CHK_CONDITION((eStatus != MOS_STATUS_SUCCESS), "Failed to copy image to surface buffer.", VA_STATUS_ERROR_OPERATION_FAILED);
+
+        vaStatus = DdiMedia_UnmapBuffer(ctx, vaimg->buf);
+        if (vaStatus != VA_STATUS_SUCCESS)
+        {
+            DDI_ASSERTMESSAGE("Failed to unmap buffer.");
+            DdiMediaUtil_UnlockSurface(mediaSurface);
+            return vaStatus;
+        }
+
         DdiMediaUtil_UnlockSurface(mediaSurface);
-        return VA_STATUS_ERROR_UNKNOWN;
     }
 
-    DdiMediaUtil_UnlockSurface(mediaSurface);
-
     return VA_STATUS_SUCCESS;
-
 }
 
 //!
diff --git a/media_driver/linux/common/vp/ddi/media_libva_vp.c b/media_driver/linux/common/vp/ddi/media_libva_vp.c
index 90375c2a0331..471fce6d9fa6 100644
--- a/media_driver/linux/common/vp/ddi/media_libva_vp.c
+++ b/media_driver/linux/common/vp/ddi/media_libva_vp.c
@@ -3265,31 +3265,27 @@ VAStatus DdiVp_EndPicture (
 ////////////////////////////////////////////////////////////////////////////////
 //! \purpose
 //!  Execute video processing pipeline.
-//!  For CSC/Scaling after decode.
+//!  For CSC/Scaling after decode by decode context.
 //! \params
 //! [in]  pVaDrvCtxv    : VA Driver Context
 //! [in]  vaCtxID       : VA Context ID
-//! [in]  src_surface   : Input surface ID
-//! [in]  x             : X offset of the input surface region
-//! [in]  y             : Y offset of the input surface region
-//! [in]  width         : Width the input surface region
-//! [in]  height        : Height the input surface region
-//! [in]  dst_surface   : Output surface ID
+//! [in]  srcSurface    : Input surface ID
+//! [in]  srcRect       : Rectangle of the input surface region
+//! [in]  dstSurface    : Output surface ID
+//! [in]  dstRect       : Rectangle of the output surface region
 //! [out] None
 //! \returns VA_STATUS_SUCCESS if call succeeds
 ////////////////////////////////////////////////////////////////////////////////
 VAStatus DdiVp_VideoProcessPipeline(
     VADriverContextP    pVaDrvCtx,
     VAContextID         vpCtxID,
-    VASurfaceID         src_surface,
-    int32_t             x,     
-    int32_t             y,
-    uint32_t            width, 
-    uint32_t            height,
-    VASurfaceID         dst_surface)
+    VASurfaceID         srcSurface,
+    VARectangle         *srcRect,
+    VASurfaceID         dstSurface,
+    VARectangle         *dstRect)
 {
     VAStatus            vaStatus;
-    uint32_t            ctxType; 
+    uint32_t            ctxType;
     PDDI_VP_CONTEXT     pVpCtx;
 
     VP_DDI_FUNCTION_ENTER;
@@ -3299,19 +3295,16 @@ VAStatus DdiVp_VideoProcessPipeline(
     pVpCtx = (PDDI_VP_CONTEXT)DdiMedia_GetContextFromContextID(pVaDrvCtx, vpCtxID, &ctxType);
     DDI_CHK_NULL(pVpCtx, "nullptr pVpCtx", VA_STATUS_ERROR_INVALID_CONTEXT);
 
-    vaStatus = DdiVp_BeginPicture(pVaDrvCtx, vpCtxID, dst_surface);
+    vaStatus = DdiVp_BeginPicture(pVaDrvCtx, vpCtxID, dstSurface);
     DDI_CHK_RET(vaStatus, "VP BeginPicture failed");
-    
+
     //Set parameters
     VAProcPipelineParameterBuffer* pInputPipelineParam = (VAProcPipelineParameterBuffer*)MOS_AllocAndZeroMemory(sizeof(VAProcPipelineParameterBuffer));
     DDI_CHK_NULL(pInputPipelineParam, "nullptr pInputPipelineParam", VA_STATUS_ERROR_ALLOCATION_FAILED);
-    VARectangle surface_region;
-    surface_region.x                    = x;
-    surface_region.y                    = y;
-    surface_region.width                = width;
-    surface_region.height               = height;
-    pInputPipelineParam->surface_region = &surface_region;
-    pInputPipelineParam->surface        = src_surface;
+
+    pInputPipelineParam->surface_region = srcRect;
+    pInputPipelineParam->output_region  = dstRect;
+    pInputPipelineParam->surface        = srcSurface;
 
     vaStatus = DdiVp_SetProcPipelineParams(pVaDrvCtx, pVpCtx, pInputPipelineParam);
     if(vaStatus != VA_STATUS_SUCCESS)
diff --git a/media_driver/linux/common/vp/ddi/media_libva_vp.h b/media_driver/linux/common/vp/ddi/media_libva_vp.h
index 9f0d7889786a..4c153e62423e 100644
--- a/media_driver/linux/common/vp/ddi/media_libva_vp.h
+++ b/media_driver/linux/common/vp/ddi/media_libva_vp.h
@@ -174,12 +174,10 @@ VAStatus DdiVp_RenderPicture(
 VAStatus DdiVp_VideoProcessPipeline(
     VADriverContextP    pVaDrvCtx,
     VAContextID         vpCtxID,
-    VASurfaceID         src_surface,
-    int32_t             x,     
-    int32_t             y,
-    uint32_t            width, 
-    uint32_t            height,
-    VASurfaceID         dst_surface
+    VASurfaceID         srcSurface,
+    VARectangle         *srcRect,
+    VASurfaceID         dstSurface,
+    VARectangle         *dstRect
 );
 
 VAStatus DdiVp_QueryVideoProcFilterCaps(
-- 
2.17.1

